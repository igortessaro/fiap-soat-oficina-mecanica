services:
  db:
    image: mysql:8.4
    container_name: smart-mechanical-workshop-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    ports:
      - "${DB_PORT}:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./docker/mysql/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p$$MYSQL_ROOT_PASSWORD"]
      timeout: 20s
      retries: 10
    networks:
      - mechanical-workshop-network

  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: smart-mechanical-workshop-api
    restart: unless-stopped
    environment:
      ASPNETCORE_ENVIRONMENT: Production
      ConnectionStrings__DefaultConnection: "server=${DB_HOST};port=${DB_PORT};database=${MYSQL_DATABASE};user=${MYSQL_USER};password=${MYSQL_PASSWORD};SslMode=none;AllowPublicKeyRetrieval=True;"
      Jwt__Key: ${JWT_KEY}
      BaseUrl: ${BASE_URL}
      Email__SmtpHost: ${SMTP_HOST}
      Email__SmtpPort: ${SMTP_PORT}
    ports:
      - "5180:8080"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      db:
        condition: service_healthy
    networks:
      - mechanical-workshop-network

  mailhog:
    image: mailhog/mailhog
    container_name: mailhog-smart-mechanical-workshop
    restart: unless-stopped
    ports:
      - "1025:1025"
      - "8025:8025"
    networks:
      - mechanical-workshop-network

volumes:
  mysql_data:

networks:
  mechanical-workshop-network:
    driver: bridge
